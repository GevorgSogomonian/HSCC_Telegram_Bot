package org.example.service;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.example.entity.Movie;
import org.example.entity.UserMovieRating;
import org.example.entity.Usr;
import org.example.repository.MovieRepository;
import org.example.repository.UserMovieRatingRepository;
import org.example.repository.UsrRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;

@Service
@RequiredArgsConstructor
public class TelegramBotService extends TelegramLongPollingBot {

    private final Map<String, Movie> activeRatings = new ConcurrentHashMap<>();
    private final UserMovieRatingRepository userMovieRatingRepository;
    private final CommandProcessingService commandProcessingService;
    private final UsrRepository usrRepository;
    private final MovieRepository movieRepository;
    private final TmdbService tmdbService;

    @Value("${spring.telegram.bot.username}")
    private String botUsername;

    @Value("${spring.telegram.bot.token}")
    private String botToken;

    private final Map<String, Consumer<Update>> commandHandlers = new HashMap<>();

    @PostConstruct
    public void init() {
        System.out.println("Username: " + botUsername);
        System.out.println("Token: " + botToken);

        commandHandlers.put("/search", this::handleSearchCommand);
        commandHandlers.put("/popular", this::handlePopularCommand);
        commandHandlers.put("/random", this::handleRandomCommand);
        commandHandlers.put("/mostpersonal", this::handleMostPersonalCommand);
        commandHandlers.put("/ratepopular", this::handleRatePopularCommand);
        commandHandlers.put("/personal", this::handlePersonalCommand);
        commandHandlers.put("/rateall", this::handleRateAllCommand);
        commandHandlers.put("/allrated", this::handleAllRatedCommand);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            usrRepository.findByChatId(chatId).ifPresentOrElse(
                    usr -> System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + usr.getUsername()),
                    () -> registerNewUser(update) // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );

            if (activeRatings.containsKey(chatId.toString())) {
                handleRatingResponse(update); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞)
            String command = userMessage.split(" ")[0].toLowerCase();
            commandHandlers.getOrDefault(command, this::handleUnknownCommand).accept(update);
        }
    }

    private void handleSearchCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String query = update.getMessage().getText().replace("/search ", "");
        String result = commandProcessingService.searchMovie(query);

        sendSplitResponse(chatId, result);
    }

    private void handlePopularCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getPopularMoviesRandom();

        if (!result.isEmpty()) {
            sendSplitResponse(chatId, "üåü *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*:\n\n" + result);
        } else {
            sendResponse(chatId, "üòî *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void handleRandomCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getRandomMovie();

        sendSplitResponse(chatId, result);
    }

    private void handleRatePopularCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º
        Map<String, Object> randomMovieData = tmdbService.getRandomPopularMovie();
        Movie randomMovie = commandProcessingService.saveOrUpdateMovie(randomMovieData);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ü–µ–Ω–∫–∏
        activeRatings.put(chatId, randomMovie);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∂–∞–Ω—Ä–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        String response = String.format(
                "üé• *–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Ñ–∏–ª—å–º:*\n" +
                        "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: %s\n\n" +
                        "‚ùì *–í—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º?* –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
                randomMovie.getTitle(),
                truncateDescription(randomMovie.getDescription()),
                tmdbService.getGenreNames(randomMovie.getGenreIds()), // –ñ–∞–Ω—Ä—ã
                randomMovie.getRating() != null ? randomMovie.getRating().toString() : "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
        );

        sendSplitResponse(chatId, response);
    }

    private void handlePersonalCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getPersonalRecommendation(chatId);

        sendSplitResponse(chatId, "‚ù§Ô∏è *–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n\n" + result);
    }

    private void handleAllRatedCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        try {
            String ratedMovies = commandProcessingService.getAllRatedMovies(chatId);

            sendSplitResponse(chatId, "üìã *–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤:*\n\n" + ratedMovies);
        } catch (Exception e) {
            sendResponse(chatId, "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            e.printStackTrace();
        }
    }

    private void handleMostPersonalCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getMostPersonalRecommendation(chatId);
        sendSplitResponse(chatId, result);
    }

    private void saveUserRating(String chatId, int rating) {
        Long userChatId = Long.parseLong(chatId);
        Usr user = usrRepository.findByChatId(userChatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));
        Movie movie = activeRatings.get(chatId);

        if (movie == null) {
            sendResponse(chatId, "‚ö†Ô∏è *–§–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rate –∏–ª–∏ /rateall.");
            return;
        }

        Optional<UserMovieRating> existingRating = userMovieRatingRepository.findByUserIdAndMovieId(user.getId(), movie.getId());

        if (existingRating.isPresent()) {
            UserMovieRating userMovieRating = existingRating.get();
            userMovieRating.setRating(rating);
            userMovieRatingRepository.save(userMovieRating);
            sendResponse(chatId, "‚úÖ *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!* –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ " + rating + " –±–∞–ª–ª–æ–≤. üéâ");
        } else {
            UserMovieRating userMovieRating = new UserMovieRating();
            userMovieRating.setUser(user);
            userMovieRating.setMovie(movie);
            userMovieRating.setRating(rating);
            userMovieRatingRepository.save(userMovieRating);
            sendResponse(chatId, "‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!* –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ " + rating + " –±–∞–ª–ª–æ–≤. üòä");
        }

        activeRatings.remove(chatId);
    }

    private void handleRatingResponse(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String userResponse = update.getMessage().getText().toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Movie movie = activeRatings.get(chatId);
        if (movie == null) {
            sendResponse(chatId, "üòï *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.*\n" +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /rate –∏–ª–∏ /rateall, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!");
            return;
        }

        if (userResponse.equals("–¥–∞")) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑—É (–µ—Å–ª–∏ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ)
            movieRepository.save(movie);

            sendResponse(chatId, "üé¨ –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10? ‚≠ê");
        } else if (userResponse.equals("–Ω–µ—Ç")) {
            sendResponse(chatId, "üôÖ‚Äç‚ôÇÔ∏è *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!* –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º. üé≤");
            activeRatings.remove(chatId); // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        } else {
            try {
                int rating = Integer.parseInt(userResponse);
                if (rating >= 1 && rating <= 10) {
                    saveUserRating(chatId, rating);
                    sendResponse(chatId, String.format(
                            "üé≠ *–î–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!*\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rateall!",
                            rating
                    ));
                } else {
                    sendResponse(chatId, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. ‚≠ê");
                }
            } catch (NumberFormatException e) {
                sendResponse(chatId, "‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.* –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. üßê");
            }
        }
    }


    private void handleRateAllCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        try {
            Movie randomMovie = commandProcessingService.getRandomMovieForRating();
            activeRatings.put(chatId, randomMovie);

            String response = String.format(
                    "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*\n" +
                            "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: %s\n\n" +
                            "‚ùì *–í—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º?* –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
                    randomMovie.getTitle(),
                    truncateDescription(randomMovie.getDescription()),
                    tmdbService.getGenreNames(randomMovie.getGenreIds()), // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤
                    randomMovie.getRating() != null ? randomMovie.getRating().toString() : "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
            );

            sendSplitResponse(chatId, response);
        } catch (Exception e) {
            sendResponse(chatId, "üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
            e.printStackTrace();
        }
    }

    private String truncateDescription(String description) {
        int maxLength = 500;
        if (description != null && description.length() > maxLength) {
            return description.substring(0, maxLength) + "...";
        }
        return description != null ? description : "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
    }

    private void handleUnknownCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        String response = """
        üêæ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Ñ–∏–ª—å–º–∞–º!* üé•‚ú®
        
        _–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:_
        
        üîç `/search <–Ω–∞–∑–≤–∞–Ω–∏–µ>` ‚Äî –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: `/search Inception`
        
        üåü `/popular` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        
        üé≤ `/random` ‚Äî –£–≤–∏–¥–µ—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –±–∞–∑–µ TMDb.
        
        ‚ù§Ô∏è `/personal` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
        
        üèÜ `/mostpersonal` ‚Äî –£–∑–Ω–∞—Ç—å —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–∏–ª—å–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–æ–∫.
        
        üé¨ `/ratepopular` ‚Äî –û—Ü–µ–Ω–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º. –í—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ –µ–≥–æ? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º!
        
        üåÄ `/rateall` ‚Äî –û—Ü–µ–Ω–∏—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π.
        
        üìú `/allrated` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ü–µ–Ω–∏–ª–∏, –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∏.
        
        üõ†Ô∏è _–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:_ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, `/random`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º!
        
        üß° _–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –µ—â—ë –±–æ–ª–µ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º._ üòä
        """;

        sendSplitResponse(chatId, response);
    }

    private void sendSplitResponse(String chatId, String text) {
        int maxMessageLength = 4096;
        for (int i = 0; i < text.length(); i += maxMessageLength) {
            String part = text.substring(i, Math.min(text.length(), i + maxMessageLength));
            sendResponse(chatId, part);
        }
    }

    private void sendResponse(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void registerNewUser(Update update) {
        if (update.hasMessage() && update.getMessage().getFrom() != null) {
            Long chatId = update.getMessage().getChatId();
            org.telegram.telegrambots.meta.api.objects.User fromUser = update.getMessage().getFrom();

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Usr newUser = new Usr();
            newUser.setChatId(chatId);
            newUser.setUsername(fromUser.getUserName());
            newUser.setFirstName(fromUser.getFirstName());
            newUser.setLastName(fromUser.getLastName());
            newUser.setLanguageCode(fromUser.getLanguageCode());
            newUser.setIsPremium(fromUser.getIsPremium());
            newUser.setIsBot(fromUser.getIsBot());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            usrRepository.save(newUser);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendResponse(chatId.toString(), "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + newUser.getFirstName() + "! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
        }
    }
}