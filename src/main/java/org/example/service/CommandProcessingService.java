package org.example.service;

import lombok.RequiredArgsConstructor;
import org.example.entity.Movie;
import org.example.entity.UserMovieRating;
import org.example.entity.Usr;
import org.example.repository.MovieRepository;
import org.example.repository.UserMovieRatingRepository;
import org.example.repository.UsrRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class CommandProcessingService {
    private final TmdbService tmdbService;
    private final MovieRepository movieRepository;
    private final UsrRepository usrRepository;
    private static final Logger logger = LoggerFactory.getLogger(CommandProcessingService.class);
    private final UserMovieRatingRepository userMovieRatingRepository;

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /search
    public String searchMovie(String query) {
        Map<String, Object> response = tmdbService.searchMovie(query);

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");

            movies.sort((movie1, movie2) -> {
                Double rating1 = parseRating(movie1.get("vote_average"));
                Double rating2 = parseRating(movie2.get("vote_average"));
                return rating2.compareTo(rating1);
            });

            StringBuilder result = new StringBuilder();
            for (int i = 0; i < Math.min(5, movies.size()); i++) {
                Map<String, Object> movieData = movies.get(i);
                try {
                    Movie movie = saveOrUpdateMovie(movieData); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑–µ
                    result.append(String.format(
                            "–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–ñ–∞–Ω—Ä—ã: %s\n–†–µ–π—Ç–∏–Ω–≥: %s\n\n",
                            movie.getTitle(),
                            truncateDescription(movie.getDescription()),
                            tmdbService.getGenreNames(movie.getGenreIds()), // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤
                            movie.getRating() != null ? movie.getRating().toString() : "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
                    ));
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞: {}", movieData, e);
                }
            }

            return result.toString().trim();
        }

        return "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    private Double parseRating(Object ratingObj) {
        if (ratingObj == null) {
            return 0.0;
        }
        try {
            return Double.parseDouble(ratingObj.toString());
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }

    public String getPersonalRecommendation(String chatId) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);

        Usr user = usrRepository.findByChatId(Long.parseLong(chatId))
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω!", chatId);
                    return new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} ({} {})", user.getUsername(), user.getFirstName(), user.getLastName());

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Map<String, Double> userGenres = getUserGenres(user);
        if (userGenres.isEmpty()) {
            logger.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤.", chatId);
            return "ü§∑‚Äç‚ôÇÔ∏è *–£ –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.*\n\n" +
                    "üé¨ *–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã*:\n" +
                    "üîπ `/rateall` ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n" +
                    "üîπ `/ratepopular` ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.";
        }

        List<Movie> allMovies = movieRepository.findAll();
        Collections.shuffle(allMovies);
        List<Movie> movies = allMovies.stream().limit(10).toList();

        if (movies.isEmpty()) {
            logger.warn("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return "üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
        }

        logger.info("–ù–∞–π–¥–µ–Ω–æ {} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ. –û—Ç–æ–±—Ä–∞–Ω–æ {} —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", allMovies.size(), movies.size());

        Map<Movie, Double> similarityMap = new HashMap<>();
        for (Movie movie : movies) {
            Map<String, Integer> movieVector = createGenreVector(movie.getGenreIds());
            double similarity = computeCosineSimilarity(userGenres, movieVector);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º
            if (similarity > 0) {
                similarityMap.put(movie, similarity);
            }

            logger.debug("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{}' (id: {}): {}", movie.getTitle(), movie.getMovieId(), similarity);
        }

        List<Map.Entry<Movie, Double>> sortedMovies = similarityMap.entrySet()
                .stream()
                .sorted((e1, e2) -> Double.compare(e2.getValue(), e1.getValue()))
                .limit(5)
                .toList();

        if (sortedMovies.isEmpty()) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return "ü§∑‚Äç‚ôÇÔ∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –≤–∞—Å.*";
        }

        StringBuilder response = new StringBuilder();
        for (Map.Entry<Movie, Double> entry : sortedMovies) {
            Movie movie = entry.getKey();
            double similarity = entry.getValue();
            response.append(String.format(
                    "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\nü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ*: %.2f%%\n---\n",
                    movie.getTitle(),
                    truncateDescription(movie.getDescription()),
                    tmdbService.getGenreNames(movie.getGenreIds()),
                    similarity * 100
            ));
        }

        logger.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);
        return response.toString().trim();
    }

    private String truncateDescription(String description) {
        int maxLength = 500;
        if (description != null && description.length() > maxLength) {
            return description.substring(0, maxLength) + "...";
        }
        return description != null ? description : "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
    }

    private Map<String, Double> getUserGenres(Usr user) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<UserMovieRating> ratings = userMovieRatingRepository.findByUserId(user.getId());

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤–µ—Å–∞ –∂–∞–Ω—Ä–æ–≤
        Map<String, Double> genreWeights = new HashMap<>();

        for (UserMovieRating rating : ratings) {
            int userRating = rating.getRating(); // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String[] genres = rating.getMovie().getGenreIds().split("_"); // –ñ–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å –∫ –∫–∞–∂–¥–æ–º—É –∂–∞–Ω—Ä—É
            for (String genre : genres) {
                genreWeights.put(genre, genreWeights.getOrDefault(genre, 0.0) + userRating);
            }
        }

        return genreWeights; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –∂–∞–Ω—Ä–æ–≤ –∏ –∏—Ö –≤–µ—Å–æ–≤
    }

    private Map<String, Integer> createGenreVector(String genreIds) {
        Map<String, Integer> vector = new HashMap<>();
        for (String genreId : genreIds.split("_")) {
            vector.put(genreId, vector.getOrDefault(genreId, 0) + 1);
        }
        logger.debug("–°–æ–∑–¥–∞–Ω –≤–µ–∫—Ç–æ—Ä –∂–∞–Ω—Ä–æ–≤: {}", vector);
        return vector;
    }

    private double computeCosineSimilarity(Map<String, Double> vectorA, Map<String, Integer> vectorB) {
        Set<String> allKeys = new HashSet<>();
        allKeys.addAll(vectorA.keySet());
        allKeys.addAll(vectorB.keySet());

        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        for (String key : allKeys) {
            double valueA = vectorA.getOrDefault(key, 0.0);
            double valueB = vectorB.getOrDefault(key, 0);

            dotProduct += valueA * valueB;
            normA += Math.pow(valueA, 2);
            normB += Math.pow(valueB, 2);

            logger.debug("–ñ–∞–Ω—Ä: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ A: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ B: {}, –¢–µ–∫—É—â–∏–π dotProduct: {}", key, valueA, valueB, dotProduct);
        }

        logger.debug("–ù–æ—Ä–º–∞ A: {}, –ù–æ—Ä–º–∞ B: {}, –ò—Ç–æ–≥–æ–≤—ã–π dotProduct: {}", Math.sqrt(normA), Math.sqrt(normB), dotProduct);

        if (normA == 0 || normB == 0) {
            logger.warn("–û–¥–∏–Ω –∏–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 0.");
            return 0.0;
        }

        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }

    public String getRandomMovie() {
        Map<String, Object> randomMovieData = tmdbService.getRandomMovieFromAll();

        if (randomMovieData != null) {
            Movie movie = saveOrUpdateMovie(randomMovieData);
            return String.format(
                    "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å:*\nüé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: %s",
                    movie.getTitle(),
                    truncateDescription(movie.getDescription()),
                    tmdbService.getGenreNames(movie.getGenreIds()),
                    movie.getRating() != null ? movie.getRating().toString() : "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
            );
        }

        return "üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    public Movie getRandomMovieForRating() {
        Map<String, Object> randomMovie = tmdbService.getRandomMovieFromAll();

        if (randomMovie != null) {
            Long movieId = Long.valueOf(randomMovie.getOrDefault("id", 0).toString());
            return movieRepository.findByMovieId(movieId).orElseGet(() -> {
                Movie newMovie = new Movie();
                newMovie.setMovieId(movieId);
                newMovie.setTitle((String) randomMovie.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"));
                newMovie.setRating(parseRating(randomMovie.get("vote_average")));
                newMovie.setDescription((String) randomMovie.getOrDefault("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä—ã
                StringBuilder stringBuilder = new StringBuilder();
                ((List<Integer>) randomMovie.getOrDefault("genre_ids", Collections.emptyList()))
                        .forEach(genreId -> stringBuilder.append(genreId).append("_"));
                if (stringBuilder.length() > 0) {
                    stringBuilder.deleteCharAt(stringBuilder.length() - 1);
                }
                newMovie.setGenreIds(stringBuilder.toString());

                movieRepository.save(newMovie); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –±–∞–∑—É
                return newMovie;
            });
        }

        throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –±–∞–∑—ã TMDb.");
    }

    public String getAllRatedMovies(String chatId) {
        Long userChatId = Long.parseLong(chatId);

        Usr user = usrRepository.findByChatId(userChatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

        List<UserMovieRating> ratings = userMovieRatingRepository.findByUserId(user.getId())
                .stream()
                .sorted((r1, r2) -> Long.compare(r2.getId(), r1.getId()))
                .limit(12)
                .toList();

        if (ratings.isEmpty()) {
            return "üìù *–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /ratepopular –∏–ª–∏ /rateall!";
        }

        return ratings.stream()
                .map(rating -> String.format(
                        "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\n‚≠ê *–û—Ü–µ–Ω–∫–∞*: %d\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\n",
                        rating.getMovie().getTitle(),
                        rating.getRating(),
                        tmdbService.getGenreNames(rating.getMovie().getGenreIds())
                ))
                .collect(Collectors.joining("\n---\n"));
    }

    public Movie saveOrUpdateMovie(Map<String, Object> movieData) {
        Long movieId = Long.valueOf(movieData.getOrDefault("id", 0).toString());
        Optional<Movie> existingMovie = movieRepository.findByMovieId(movieId);

        if (existingMovie.isPresent()) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∏–ª—å–º
            Movie movie = existingMovie.get();
            movie.setTitle((String) movieData.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"));
            movie.setDescription((String) movieData.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"));
            movie.setRating(parseRating(movieData.get("vote_average")));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
            StringBuilder genreBuilder = new StringBuilder();
            ((List<Integer>) movieData.getOrDefault("genre_ids", Collections.emptyList()))
                    .forEach(genreId -> genreBuilder.append(genreId).append("_"));
            if (genreBuilder.length() > 0) {
                genreBuilder.deleteCharAt(genreBuilder.length() - 1);
            }
            movie.setGenreIds(genreBuilder.toString());

            return movieRepository.save(movie);
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º
            Movie newMovie = new Movie();
            newMovie.setMovieId(movieId);
            newMovie.setTitle((String) movieData.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"));
            newMovie.setDescription((String) movieData.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"));
            newMovie.setRating(parseRating(movieData.get("vote_average")));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä—ã
            StringBuilder genreBuilder = new StringBuilder();
            ((List<Integer>) movieData.getOrDefault("genre_ids", Collections.emptyList()))
                    .forEach(genreId -> genreBuilder.append(genreId).append("_"));
            if (genreBuilder.length() > 0) {
                genreBuilder.deleteCharAt(genreBuilder.length() - 1);
            }
            newMovie.setGenreIds(genreBuilder.toString());

            return movieRepository.save(newMovie);
        }
    }

    public String getMostPersonalRecommendation(String chatId) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);

        Usr user = usrRepository.findByChatId(Long.parseLong(chatId))
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω!", chatId);
                    return new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} ({} {})", user.getUsername(), user.getFirstName(), user.getLastName());

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Map<String, Double> userGenres = getUserGenres(user);
        if (userGenres.isEmpty()) {
            logger.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤.", chatId);
            return "ü§∑‚Äç‚ôÇÔ∏è *–£ –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.*\n\n" +
                    "üé¨ *–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã*:\n" +
                    "üîπ `/rateall` ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.\n" +
                    "üîπ `/ratepopular` ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.";
        }

        List<Movie> allMovies = movieRepository.findAll();
        if (allMovies.isEmpty()) {
            logger.warn("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return "üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
        }

        Movie bestMatch = null;
        double maxSimilarity = -1;

        for (Movie movie : allMovies) {
            Map<String, Integer> movieVector = createGenreVector(movie.getGenreIds());
            double similarity = computeCosineSimilarity(userGenres, movieVector);

            logger.debug("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{}' (id: {}): {}", movie.getTitle(), movie.getMovieId(), similarity);

            if (similarity > maxSimilarity) {
                maxSimilarity = similarity;
                bestMatch = movie;
            }
        }

        if (bestMatch == null) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return "ü§∑‚Äç‚ôÇÔ∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å.*";
        }

        logger.info("–õ—É—á—à–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (id: {}). –°—Ö–æ–¥—Å—Ç–≤–æ: {}", bestMatch.getTitle(), bestMatch.getMovieId(), maxSimilarity);

        return String.format(
                "üé• *–°–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–∏–ª—å–º:*\n\n" +
                        "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\nü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ*: %.2f%%",
                bestMatch.getTitle(),
                truncateDescription(bestMatch.getDescription()),
                tmdbService.getGenreNames(bestMatch.getGenreIds()),
                maxSimilarity * 100
        );
    }

    public String getPopularMoviesRandom() {
        Map<String, Object> response = tmdbService.getPopularMovies();

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å–º—ã –≤ –±–∞–∑–µ
            movies.forEach(this::saveOrUpdateMovie);

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
            Collections.shuffle(movies);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            return movies.stream()
                    .limit(5) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ñ–∏–ª—å–º–æ–≤
                    .map(movie -> String.format(
                            "üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: %s\nüé≠ *–ñ–∞–Ω—Ä—ã*: %s\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: %s\n",
                            movie.get("title"),
                            truncateDescription((String) movie.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")),
                            tmdbService.getGenreNames(getGenreIdsFromMovieData(movie)), // –ñ–∞–Ω—Ä—ã
                            movie.getOrDefault("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
                    ))
                    .collect(Collectors.joining("\n---\n"));
        }

        return "üòû *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üåü";
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤
    private String getGenreIdsFromMovieData(Map<String, Object> movieData) {
        List<Integer> genreIds = (List<Integer>) movieData.getOrDefault("genre_ids", Collections.emptyList());
        return genreIds.stream()
                .map(Object::toString)
                .collect(Collectors.joining("_"));
    }
}
