package org.example.service;

import lombok.RequiredArgsConstructor;
import org.example.entity.Movie;
import org.example.entity.UserMovieRating;
import org.example.entity.Usr;
import org.example.repository.MovieRepository;
import org.example.repository.UserMovieRatingRepository;
import org.example.repository.UsrRepository;
import org.example.service.Json.JsonProcessing;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class CommandProcessingService {
    private final JsonProcessing jsonProcessing;
    private final TmdbService tmdbService;
    private final MovieRepository movieRepository;
    private final UsrRepository usrRepository;
    private static final Logger logger = LoggerFactory.getLogger(CommandProcessingService.class);
    private final UserMovieRatingRepository userMovieRatingRepository;

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /search
    public String searchMovie(String query) {
        Map<String, Object> response = tmdbService.searchMovie(query);

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");

            movies.sort((movie1, movie2) -> {
                Double rating1 = parseRating(movie1.get("vote_average"));
                Double rating2 = parseRating(movie2.get("vote_average"));
                return rating2.compareTo(rating1);
            });

            StringBuilder result = new StringBuilder();
            for (int i = 0; i < Math.min(5, movies.size()); i++) {
                Map<String, Object> movie = movies.get(i);
                String title = (String) movie.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è");
                String overview = (String) movie.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è");
                String rating = String.valueOf(movie.getOrDefault("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"));

                result.append(String.format("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–†–µ–π—Ç–∏–Ω–≥: %s\n\n", title, overview, rating));
            }

            return result.toString().trim();
        }

        return "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /popular
    public String getPopularMoviesRandom() {
        Map<String, Object> response = tmdbService.getPopularMovies();

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");
            Collections.shuffle(movies);

            return movies.stream()
                    .limit(5)
                    .map(movie -> String.format("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–†–µ–π—Ç–∏–Ω–≥: %s\n",
                            movie.get("title"),
                            movie.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                            movie.getOrDefault("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")))
                    .collect(Collectors.joining("\n---\n"));
        }

        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /random
    public String getRandomMovie() {
        Map<String, Object> response = tmdbService.getPopularMovies();

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");

            List<Map<String, Object>> filteredMovies = movies.stream()
                    .filter(movie -> parseRating(movie.get("vote_average")) > 6.0)
                    .collect(Collectors.toList());

            if (!filteredMovies.isEmpty()) {
                Map<String, Object> randomMovie = filteredMovies.get(new Random().nextInt(filteredMovies.size()));
                String title = (String) randomMovie.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è");
                String overview = (String) randomMovie.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è");
                String rating = String.valueOf(randomMovie.getOrDefault("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"));

                return String.format("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n –û–ø–∏—Å–∞–Ω–∏–µ: %s\n –†–µ–π—Ç–∏–Ω–≥: %s", title, overview, rating);
            }
        }

        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 6.";
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    private Double parseRating(Object ratingObj) {
        if (ratingObj == null) {
            return 0.0;
        }
        try {
            return Double.parseDouble(ratingObj.toString());
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }

    public Movie getOrCreateMovie() {
        Map<String, Object> response = tmdbService.getPopularMovies();
        Map<String, Object> randomMovi = new LinkedHashMap<>();

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");
            if (!movies.isEmpty()) {
                randomMovi = movies.get(new Random().nextInt(movies.size()));
            }
        }
        final Map<String, Object> randomMovie = randomMovi;

        Long movieId = Long.valueOf(randomMovie.getOrDefault("id", 0).toString()); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
        return movieRepository.findByMovieId(movieId).orElseGet(() -> {
            Movie newMovie = new Movie();
            newMovie.setMovieId(movieId);
            newMovie.setTitle((String) randomMovie.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")); // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            newMovie.setRating((Double) randomMovie.getOrDefault("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")); // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
//            List<Integer> genre_ids = (List<Integer>) randomMovie.getOrDefault("genre_ids", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è");
            StringBuilder stringBuilder = new StringBuilder();
            ((List<Integer>) randomMovie.getOrDefault("genre_ids", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"))
                    .forEach(genre_id -> stringBuilder.append(genre_id).append("_"));
            stringBuilder.deleteCharAt(stringBuilder.length() - 1);
            newMovie.setGenreIds(stringBuilder.toString());
            return newMovie;
        });
    }

    public String getPersonalRecommendation(String chatId) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);

        Usr user = usrRepository.findByChatId(Long.parseLong(chatId))
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω!", chatId);
                    return new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} ({} {})", user.getUsername(), user.getFirstName(), user.getLastName());

        List<Movie> allMovies = movieRepository.findAll();
        Collections.shuffle(allMovies); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∏–ª—å–º—ã
        List<Movie> movies = allMovies.stream().limit(10).toList();

        logger.info("–ù–∞–π–¥–µ–Ω–æ {} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ. –û—Ç–æ–±—Ä–∞–Ω–æ {} —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", allMovies.size(), movies.size());

        if (movies.isEmpty()) {
            logger.warn("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å–º—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.");
            return "–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
        }

        Map<String, Double> userGenres = getUserGenres(user);
        logger.info("–í–µ–∫—Ç–æ—Ä –∂–∞–Ω—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userGenres);

        Movie bestMatch = findBestMatch(userGenres, movies);

        if (bestMatch == null) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å.";
        }

        // –†–∞—Å—á–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–∏–ª—å–º–∞
        Map<String, Integer> bestMovieVector = createGenreVector(bestMatch.getGenreIds());
        double similarity = computeCosineSimilarity(userGenres, bestMovieVector);

        logger.info("–õ—É—á—à–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (id: {}). –°—Ö–æ–¥—Å—Ç–≤–æ: {}", bestMatch.getTitle(), bestMatch.getMovieId(), similarity);

        return String.format(
                "üé• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º —Ñ–∏–ª—å–º: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n–°—Ö–æ–¥—Å—Ç–≤–æ —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏: %.2f%%",
                bestMatch.getTitle(),
                bestMatch.getDescription(),
                similarity * 100
        );
    }



    private Map<String, Double> getUserGenres(Usr user) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<UserMovieRating> ratings = userMovieRatingRepository.findByUserId(user.getId());

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤–µ—Å–∞ –∂–∞–Ω—Ä–æ–≤
        Map<String, Double> genreWeights = new HashMap<>();

        for (UserMovieRating rating : ratings) {
            int userRating = rating.getRating(); // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String[] genres = rating.getMovie().getGenreIds().split("_"); // –ñ–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å –∫ –∫–∞–∂–¥–æ–º—É –∂–∞–Ω—Ä—É
            for (String genre : genres) {
                genreWeights.put(genre, genreWeights.getOrDefault(genre, 0.0) + userRating);
            }
        }

        return genreWeights; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –∂–∞–Ω—Ä–æ–≤ –∏ –∏—Ö –≤–µ—Å–æ–≤
    }




    private Movie findBestMatch(Map<String, Double> userGenres, List<Movie> movies) {
        if (userGenres.isEmpty()) {
            logger.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∂–∞–Ω—Ä–∞–º.");
            return null;
        }

        // –õ—É—á—à–∏–π —Ñ–∏–ª—å–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        Movie bestMatch = null;
        double maxSimilarity = -1;

        for (Movie movie : movies) {
            Map<String, Integer> movieVector = createGenreVector(movie.getGenreIds()); // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
            double similarity = computeCosineSimilarity(userGenres, movieVector);

            logger.debug("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{}' (id: {}): {}", movie.getTitle(), movie.getMovieId(), similarity);

            if (similarity > maxSimilarity) {
                maxSimilarity = similarity;
                bestMatch = movie;
            }
        }

        logger.info("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {}. –õ—É—á—à–∏–π —Ñ–∏–ª—å–º: {}", maxSimilarity, bestMatch != null ? bestMatch.getTitle() : "–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∏–ª—å–º–∞");
        return bestMatch;
    }


    private Map<String, Integer> createGenreVector(String genreIds) {
        Map<String, Integer> vector = new HashMap<>();
        for (String genreId : genreIds.split("_")) {
            vector.put(genreId, vector.getOrDefault(genreId, 0) + 1);
        }
        logger.debug("–°–æ–∑–¥–∞–Ω –≤–µ–∫—Ç–æ—Ä –∂–∞–Ω—Ä–æ–≤: {}", vector);
        return vector;
    }

    private double computeCosineSimilarity(Map<String, Double> vectorA, Map<String, Integer> vectorB) {
        Set<String> allKeys = new HashSet<>();
        allKeys.addAll(vectorA.keySet());
        allKeys.addAll(vectorB.keySet());

        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        for (String key : allKeys) {
            double valueA = vectorA.getOrDefault(key, 0.0);
            double valueB = vectorB.getOrDefault(key, 0);

            dotProduct += valueA * valueB;
            normA += Math.pow(valueA, 2);
            normB += Math.pow(valueB, 2);

            logger.debug("–ñ–∞–Ω—Ä: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ A: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ B: {}, –¢–µ–∫—É—â–∏–π dotProduct: {}", key, valueA, valueB, dotProduct);
        }

        logger.debug("–ù–æ—Ä–º–∞ A: {}, –ù–æ—Ä–º–∞ B: {}, –ò—Ç–æ–≥–æ–≤—ã–π dotProduct: {}", Math.sqrt(normA), Math.sqrt(normB), dotProduct);

        if (normA == 0 || normB == 0) {
            logger.warn("–û–¥–∏–Ω –∏–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 0.");
            return 0.0;
        }

        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }
}
